/* Verilog Code for FSM */

module fsm(
    input wire clk,       // Clock input
    input wire reset,     // Reset input
    input wire in,        // Input signal
    output reg [1:0] state // Current state output
);

    // State encoding
    parameter S0 = 2'b00,
              S1 = 2'b01,
              S2 = 2'b10;

    // Next state logic
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            state <= S0; // Reset to state S0
        end else begin
            case (state)
                S0: state <= in ? S1 : S0;
                S1: state <= in ? S2 : S0;
                S2: state <= in ? S2 : S1;
                default: state <= S0; // Default to state S0
            endcase
        end
    end
endmodule




/* Testbench Code */

module tb_fsm;
    reg clk;         // Clock signal
    reg reset;       // Reset signal
    reg in;          // Input signal
    wire [1:0] state; // Current state

    // Instantiate the FSM
    fsm uut (
        .clk(clk),
        .reset(reset),
        .in(in),
        .state(state)
    );

    // Clock generation
    initial begin
        clk = 0;
        forever #5 clk = ~clk; // 10 time units period
    end

    // Test sequence
    initial begin
        // Initialize signals
        reset = 1;
        in = 0;

        // Reset the FSM
        #10 reset = 0;

        // Test transitions
        #10 in = 1; // Expect state to transition from S0 to S1
        #10 in = 1; // Expect state to transition from S1 to S2
        #10 in = 0; // Expect state to transition from S2 to S1
        #10 in = 0; // Expect state to transition from S1 to S0
        #10 in = 1; // Expect state to transition from S0 to S1

        // Finish the simulation
        #50 $finish;
    end

    // Monitor the state
    initial begin
        $monitor("Time: %0t | State: %b | Input: %b", $time, state, in);
    end
endmodule

